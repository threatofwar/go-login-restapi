# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  # push:
  #   branches: [ "feature/*", "bugfix/*", "hotfix/*", "release/*" ]
  pull_request:
    branches: [ "dev" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Init
      run: go mod init go-login-restapi

    - name: Add dependencies
      run: go mod tidy
      
    - name: Build
      run: go build -v ./...

    - name: Run application
      run: |
        # Pass secrets and variables as environment variables
        JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
        REFRESH_SECRET_KEY="${{ secrets.REFRESH_SECRET_KEY }}" \
        EMAIL_VERIFICATION_SECRET_KEY="${{ secrets.EMAIL_VERIFICATION_SECRET_KEY }}" \
        PORT="${{ vars.PORT }}" \
        COOKIES_FQDN="${{ vars.COOKIES_FQDN }}" \
        ALLOWORIGINS_URL="${{ vars.ALLOWORIGINS_URL }}" \
        HEADER_USERAGENT_KEY="${{ vars.HEADER_USERAGENT_KEY }}" \
        nohup go run main.go > server.log 2>&1 &
        echo $! > server.pid
        sleep 5

    - name: Test login endpoint
      run: |
        RESPONSE=$(curl -X POST http://localhost:8080/login \
          -H "Content-Type: application/json" \
          -d '{"username": "user", "password": "123"}')
        echo "Response: $RESPONSE"
        ACCESS_TOKEN=$(echo $RESPONSE | jq -r '.access_token')
        REFRESH_TOKEN=$(echo $RESPONSE | jq -r '.refresh_token')
        echo "Access Token: $ACCESS_TOKEN"
        echo "Refresh Token: $REFRESH_TOKEN"
        echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
        echo "REFRESH_TOKEN=$REFRESH_TOKEN" >> $GITHUB_ENV

    
    - name: Test profile endpoint
      run: |
        if [ -z "$ACCESS_TOKEN" ]; then
          echo "Access token is empty. Login failed."
          exit 1
        fi
        PROFILE_RESPONSE=$(curl -X GET http://localhost:8080/auth/profile \
          -H "Authorization: Bearer $ACCESS_TOKEN")
        echo $PROFILE_RESPONSE

    - name: Test refresh token endpoint
      run: |
        if [ -z "$REFRESH_TOKEN" ]; then
          echo "Refresh token is empty. Login failed."
          exit 1
        fi
        REFRESH_RESPONSE=$(curl -X POST http://localhost:8080/refresh-token \
          -H "Content-Type: application/json" \
          -d '{"refresh_token": "'$REFRESH_TOKEN'"}')
        echo "Refresh Response: $REFRESH_RESPONSE"
        NEW_ACCESS_TOKEN=$(echo $REFRESH_RESPONSE | jq -r '.access_token')
        echo "NEW_ACCESS_TOKEN=$NEW_ACCESS_TOKEN"
        echo "NEW_ACCESS_TOKEN=$NEW_ACCESS_TOKEN" >> $GITHUB_ENV

    - name: Re-Test profile endpoint with new access token
      run: |
        if [ -z "$NEW_ACCESS_TOKEN" ]; then
          echo "New Access token is empty. Refresh failed."
          exit 1
        fi
        PROFILE_RESPONSE=$(curl -X GET http://localhost:8080/auth/profile \
          -H "Authorization: Bearer $NEW_ACCESS_TOKEN")
        echo $PROFILE_RESPONSE

    - name: Test login endpoint with User-Agent (MobileApp)
      run: |
        RESPONSE=$(curl -X POST http://localhost:8080/login \
          -H "Content-Type: application/json" \
          -H "User-Agent: $HEADER_USERAGENT_KEY" \
          -d '{"username": "user", "password": "123"}')
        echo "Response: $RESPONSE"
        ACCESS_TOKEN=$(echo $RESPONSE | jq -r '.access_token')
        REFRESH_TOKEN=$(echo $RESPONSE | jq -r '.refresh_token')
        echo "Access Token: $ACCESS_TOKEN"
        echo "Refresh Token: $REFRESH_TOKEN"
        echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
        echo "REFRESH_TOKEN=$REFRESH_TOKEN" >> $GITHUB_ENV

    - name: Test registration and email verification
      run: |
        REGISTRATION_RESPONSE=$(curl -s -X POST http://localhost:8080/register \
          -H "Content-Type: application/json" \
          -d '{"username": "user1","password": "123","emails": ["user1@user","user1@email","user1@whatisthis"]}')
        echo "Registration Response: $REGISTRATION_RESPONSE"
        if echo "$REGISTRATION_RESPONSE" | grep -q "User registered successfully with emails"; then
          echo "Registration test passed."
        else
          echo "Registration test failed."
          exit 1
        fi
        EMAILS=$(echo "$REGISTRATION_RESPONSE" | jq -c '.emails[]')
        echo "Extracted Emails and Tokens: $EMAILS"
        echo "$EMAILS" | while read -r EMAIL_DATA; do
          EMAIL=$(echo "$EMAIL_DATA" | jq -r '.email')
          VERIFICATION_TOKEN=$(echo "$EMAIL_DATA" | jq -r '.verification_token')
          echo "Verifying email: $EMAIL with token: $VERIFICATION_TOKEN"
          VERIFY_RESPONSE=$(curl -s -X POST http://localhost:8080/verify-email \
            -H "Content-Type: application/json" \
            -d "{\"verification_token\": \"$VERIFICATION_TOKEN\"}")
          echo "Verify Response for $EMAIL: $VERIFY_RESPONSE"
          if echo "$VERIFY_RESPONSE" | grep -q "Email verification successful"; then
            echo "Email verification for $EMAIL passed."
          else
            echo "Email verification for $EMAIL failed."
            exit 1
          fi
        done

    - name: Test
      run: |
        if ls *.go 1> /dev/null 2>&1; then
          go test -v ./...
        else
          echo "No test files found. Skipping tests."
        fi

