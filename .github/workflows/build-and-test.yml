# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "feature/*", "bugfix/*", "hotfix/*", "release/*" ]
  pull_request:
    branches: [ "dev" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Init
      run: go mod init threatofwar/go-login-restapi

    - name: Add dependencies
      run: go mod tidy
      
    - name: Build
      run: go build -v ./...

    - name: Run application
      run: |
        # Pass secrets and variables as environment variables
        JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
        REFRESH_SECRET_KEY="${{ secrets.REFRESH_SECRET_KEY }}" \
        EMAIL_VERIFICATION_SECRET_KEY="${{ secrets.EMAIL_VERIFICATION_SECRET_KEY }}" \
        PORT="${{ vars.PORT }}" \
        COOKIES_FQDN="${{ vars.COOKIES_FQDN }}" \
        ALLOWORIGINS_URL="${{ vars.ALLOWORIGINS_URL }}" \
        HEADER_USERAGENT_KEY="${{ vars.HEADER_USERAGENT_KEY }}" \
        nohup go run main.go > server.log 2>&1 &
        echo $! > server.pid
        sleep 5
    
    - name: Test login and capture cookies
      run: |
        response=$(curl -i -X POST http://localhost:8080/login \
          -H "Content-Type: application/json" \
          -d '{"username": "user", "password": "123"}')
        echo "Response: $response"
        ACCESS_TOKEN=$(echo "$response" | grep -i 'Set-Cookie: access_token' | sed 's/.*access_token=\([^;]*\).*/\1/')
        REFRESH_TOKEN=$(echo "$response" | grep -i 'Set-Cookie: refresh_token' | sed 's/.*refresh_token=\([^;]*\).*/\1/')
        echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
        echo "REFRESH_TOKEN=$REFRESH_TOKEN" >> $GITHUB_ENV

    
    - name: Test profile endpoint
      run: |
        if [ -z "$ACCESS_TOKEN" ]; then
          echo "Access token is empty. Login failed."
          exit 1
        fi
        profile_response=$(curl -X GET http://localhost:8080/auth/profile \
          -H "Authorization: Bearer $ACCESS_TOKEN")
        echo $profile_response

    - name: Test refresh token endpoint
      run: |
        if [ -z "$REFRESH_TOKEN" ]; then
          echo "Refresh token is empty. Login failed."
          exit 1
        fi
        refresh_response=$(curl -X POST http://localhost:8080/refresh-token \
          -H "Content-Type: application/json" \
          -d '{"refresh_token": "'$REFRESH_TOKEN'"}')
        echo "Refresh Response: $refresh_response"
        NEW_ACCESS_TOKEN=$(echo $refresh_response | jq -r '.access_token')
        echo "NEW_ACCESS_TOKEN=$NEW_ACCESS_TOKEN"
        echo "NEW_ACCESS_TOKEN=$NEW_ACCESS_TOKEN" >> $GITHUB_ENV

    - name: Re-Test profile endpoint with new access token
      run: |
        if [ -z "$NEW_ACCESS_TOKEN" ]; then
          echo "New Access token is empty. Refresh failed."
          exit 1
        fi
        profile_response=$(curl -X GET http://localhost:8080/auth/profile \
          -H "Authorization: Bearer $NEW_ACCESS_TOKEN")
        echo $profile_response

    - name: Test login endpoint with User-Agent (MobileApp)
      run: |
        response=$(curl -X POST http://localhost:8080/login \
          -H "Content-Type: application/json" \
          -H "User-Agent: $HEADER_USERAGENT_KEY" \
          -d '{"username": "user", "password": "123"}')
        echo "Response: $response"
        ACCESS_TOKEN=$(echo $response | jq -r '.access_token')
        REFRESH_TOKEN=$(echo $response | jq -r '.refresh_token')
        echo "Access Token: $ACCESS_TOKEN"
        echo "Refresh Token: $REFRESH_TOKEN"
        echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
        echo "REFRESH_TOKEN=$REFRESH_TOKEN" >> $GITHUB_ENV

    - name: Re-test profile endpoint
      run: |
        if [ -z "$ACCESS_TOKEN" ]; then
          echo "Access token is empty. Login failed."
          exit 1
        fi
        profile_response=$(curl -X GET http://localhost:8080/auth/profile \
          -H "Authorization: Bearer $ACCESS_TOKEN")
        echo $profile_response

    - name: Re-test refresh token endpoint
      run: |
        if [ -z "$REFRESH_TOKEN" ]; then
          echo "Refresh token is empty. Login failed."
          exit 1
        fi
        refresh_response=$(curl -X POST http://localhost:8080/refresh-token \
          -H "Content-Type: application/json" \
          -d '{"refresh_token": "'$REFRESH_TOKEN'"}')
        echo "Refresh Response: $refresh_response"
        NEW_ACCESS_TOKEN=$(echo $refresh_response | jq -r '.access_token')
        echo "NEW_ACCESS_TOKEN=$NEW_ACCESS_TOKEN"
        echo "NEW_ACCESS_TOKEN=$NEW_ACCESS_TOKEN" >> $GITHUB_ENV

    - name: Re-Test profile endpoint with new access token
      run: |
        if [ -z "$NEW_ACCESS_TOKEN" ]; then
          echo "New Access token is empty. Refresh failed."
          exit 1
        fi
        profile_response=$(curl -X GET http://localhost:8080/auth/profile \
          -H "Authorization: Bearer $NEW_ACCESS_TOKEN")
        echo $profile_response

    - name: Test
      run: |
        if ls *.go 1> /dev/null 2>&1; then
          go test -v ./...
        else
          echo "No test files found. Skipping tests."
        fi

    - name: Stop Application
      run: |
        kill $(cat server.pid)


